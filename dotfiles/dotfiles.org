#+TITLE: literate dotfiles

* doom emacs
** config
#+BEGIN_SRC org :tangle ~/.doom.d/config.org
,* settings
,** me
ðŸ‘‹ðŸ‘‹ðŸ‘‹
,#+BEGIN_SRC emacs-lisp
(setq user-full-name "wojtii"
      user-mail-address "wojciechniedbala@pm.me")
,#+END_SRC

,** theme
,#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-wilmersdorf)
,#+END_SRC

,** font
,#+BEGIN_SRC emacs-lisp
(setq doom-font
      (font-spec :family "Iosevka Nerd Font" :size 16))
,#+END_SRC

,** modeline
,#+BEGIN_SRC emacs-lisp
(setq doom-modeline-vcs-max-length 16)
 ,#+END_SRC

,** initial mode
,#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
,#+END_SRC
,** do not truncate lines
,#+BEGIN_SRC emacs-lisp
(setq truncate-lines nil)
 ,#+END_SRC

,** launch fullscreen
,#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(fullscreen . maximized))
,#+END_SRC

,** transparency
,#+BEGIN_SRC emacs-lisp
(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(75 . 75) '(100 . 100)))))
(map! :m "C-c t" #'toggle-transparency)
,#+END_SRC

,** auto revert
,#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
(setq auto-revert-check-vc-info t)
,#+END_SRC

,** trailing whitespaces
,#+BEGIN_SRC emacs-lisp
(add-hook! before-save-hook
           'delete-trailing-whitespace)
,#+END_SRC

,** resizing
,#+BEGIN_SRC emacs-lisp
(map!
 :m "M-<down>" #'evil-window-decrease-height
 :m "M-<up>" #'evil-window-increase-height
 :m "M-<left>" #'evil-window-decrease-width
 :m "M-<right>" #'evil-window-increase-width)
,#+END_SRC

,** disable right alt
,#+BEGIN_SRC emacs-lisp
(setq ns-right-alternate-modifier nil)
,#+END_SRC

,** terminal
,#+BEGIN_SRC emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
(map! :m "C-," (lambda ()
                 (interactive)
                 (vterm explicit-shell-file-name)))

(setq kill-buffer-query-functions
      (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
,#+END_SRC

,** prolog instead of perl
,#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.\\(pl\\|pro\\|lgt\\)" . prolog-mode))
,#+END_SRC

,** toggle camel under
Function for toggling between camel and snake cases,
copied from https://stackoverflow.com/a/58275432
,#+BEGIN_SRC emacs-lisp
(defun toggle-camelcase-underscores (first-lower-p)
  "Toggle between camelcase and underscore notation for the
symbol at point. If prefix arg, C-u, is supplied, then make first
letter of camelcase lowercase."
  (interactive "P")
  (save-excursion
    (let* ((bounds (bounds-of-thing-at-point 'symbol))
           (start (car bounds))
           (end (cdr bounds))
           (currently-using-underscores-p (progn (goto-char start)
                                                 (re-search-forward "_" end t))))
      (if currently-using-underscores-p
          (progn
            (replace-string "_" " " nil start end)
            (upcase-initials-region start end)
            (replace-string " " "" nil start end)
            (when first-lower-p
              (downcase-region start (1+ start))))
        (replace-regexp "\\([A-Z]\\)" "_\\1" nil (1+ start) end)
        (downcase-region start (cdr (bounds-of-thing-at-point 'symbol)))))))
,#+END_SRC

,** viewing big files
,#+BEGIN_SRC emacs-lisp
(defun my-find-file-check-make-large-file-read-only-hook ()
  "If a file is over a given size, make the buffer read only."
  (when (> (buffer-size) (* 1024 1024))
    (setq buffer-read-only t)
    (buffer-disable-undo)
    (fundamental-mode)))

(add-hook 'find-file-hook 'my-find-file-check-make-large-file-read-only-hook)
,#+END_SRC

,** internal border
,#+BEGIN_SRC emacs-lisp
(set-frame-parameter nil 'internal-border-width 4)
,#+END_SRC

,** eldoc
,#+BEGIN_SRC emacs-lisp
(setq global-eldoc-mode 0)
,#+END_SRC

,* packages
,** treemacs
,#+BEGIN_SRC emacs-lisp
(setq treemacs-position 'right)
,#+END_SRC
,** flyspell
,#+BEGIN_SRC emacs-lisp
(remove-hook! '(org-mode-hook)
  #'flyspell-mode)
,#+END_SRC
,** highlight-indent-guides
â‹… as indent character
,#+BEGIN_SRC emacs-lisp
(setq highlight-indent-guides-method 'character
      highlight-indent-guides-responsive 'top
      highlight-indent-guides-character ?\â‹…)
(remove-hook! '(prog-mode-hook)
  #'highlight-indent-guides-mode)
(remove-hook! '(org-mode-hook)
  #'highlight-indent-guides-mode)
,#+END_SRC

,** company
,#+BEGIN_SRC emacs-lisp
(after! company
  (set-company-backend! 'erlang-mode 'company-dabbrev-code)
  (add-hook 'after-init-hook #'global-company-mode))

(setq
 company-idle-delay 0
 company-show-numbers t)
,#+END_SRC
,** avy
,#+BEGIN_SRC emacs-lisp
(setq avy-all-windows t)
,#+END_SRC
,** lsp
,#+BEGIN_SRC emacs-lisp
(setq
 lsp-pyls-plugins-pycodestyle-max-line-length 120
 lsp-signature-auto-activate nil
 lsp-flycheck-live-reporting nil)
,#+END_SRC
,** lsp-ui
,#+BEGIN_SRC emacs-lisp
(setq
 lsp-ui-sideline-enable nil
 lsp-ui-sideline-show-diagnostics nil)
,#+END_SRC
,** org
,#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN_PROGRESS(i)"
                    "|" "DONE(d)" "CANCELLED(c)")))

  (map!
   :n "M-j" #'org-metadown
   :n "M-k" #'org-metaup
   :n "M-h" #'org-do-demote
   :n "M-l" #'org-do-promote)

  (let ((my-org-file "~/priv/cap.org"))
    (setq org-agenda-files (list my-org-file))
    (setq org-capture-templates
          `(("t" "todo" entry (file+headline ,my-org-file "todos")
             "* TODO %?\n")
            ("w" "work todo" entry (file+headline ,my-org-file "work todos")
             "* TODO %?\n")
            ("d" "daily" entry (file+headline ,my-org-file "daily")
             "* %U\n** TODO %?\n" :prepend t)
            ("i" "idea" entry (file+headline ,my-org-file "ideas")
             "* %?\n")))))

(add-hook 'org-mode-hook 'literate-calc-minor-mode)
,#+END_SRC

,** flycheck
,#+BEGIN_SRC emacs-lisp
(setq flycheck-flake8-maximum-line-length 120)
,#+END_SRC
,** projectile
,#+BEGIN_SRC emacs-lisp
(add-hook 'projectile-after-switch-project-hook (lambda ()
                                                  (projectile-invalidate-cache nil)))
(map! :leader
      (:prefix-map ("p" . "project")
        :desc "Project info" "i" #'projectile-project-info))
,#+END_SRC
,** smooth-scrolling
,#+BEGIN_SRC emacs-lisp
(smooth-scrolling-mode t)
,#+END_SRC
,** emmet
,#+BEGIN_SRC emacs-lisp
(setq emmet-expand-jsx-className? t)
,#+END_SRC
,* languages
,** js
,#+BEGIN_SRC emacs-lisp
(setq
 js-indent-level 2
 typescript-indent-level 2)
,#+END_SRC
,** markdown
,#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.\\(mdx\\)" . markdown-mode))
,#+END_SRC
,** react completion fix
this should be temporary
,#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . rjsx-mode))
;; (add-hook 'rjsx-mode-hook 'typescript-mode)
;; (add-hook 'rjsx-mode-hook 'emmet-mode)
,#+END_SRC
#+END_SRC
** init
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/init.el
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       :completion
       company           ; the ultimate code completion backend
       (ivy               ; a search engine for love and life
        +icons)
       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE tags
       indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +all             ; catch all popups that start with an asterix
        +defaults)       ; default popup rules
       ;; (pretty-code       ; replace bits of code with pretty symbols
       ;;  +hasklig)
       ;;tabbar            ; FIXME an (incomplete) tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       ;; file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;lispy             ; vim for lisp, for people who dont like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to

       :emacs
       (dired + icons)   ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       ;;term              ; terminals in Emacs
       vterm             ; another terminals in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       eval              ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup           ; helps you navigate your code and documentation
        +docsets)        ; ...or in Dash docsets locally
       lsp
       ;;macos             ; MacOS-specific commands
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       erlang            ; an elegant language for a more civilized age
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;ess               ; emacs speaks statistics
       ;;fsharp           ; ML stands for Microsoft's Language
       (go +lsp)                ; the hipster dialect
       ;;(haskell +intero) ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org              ; organize your plain life in plain text
        +dragndrop       ; file drag & drop support
        +ipython         ; ipython support for babel
        +pandoc          ; pandoc integration into org's exporter
        +present)        ; using Emacs for presentations
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       rest              ; Emacs as a REST client
       ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       ;;vala              ; GObjective-C
       yaml
       json

       :email
       ;;(mu4e +gmail)       ; WIP
       ;;notmuch             ; WIP
       ;;(wanderlust +gmail) ; WIP

       ;; Applications are complex and opinionated modules that transform Emacs
       ;; toward a specific purpose. They may have additional dependencies and
       ;; should be loaded late.
       :app
       ;;calendar
       ;;irc              ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought
       ;;(write            ; emacs as a word processor (latex + org + markdown)
       ;; +wordnut         ; wordnet (wn) search
       ;; +langtool)       ; a proofreader (grammar/style check) for Emacs

       :collab
       ;;floobits          ; peer programming for a price
       ;;impatient-mode    ; show off code over HTTP

       :config
       ;; For literate config users. This will tangle+compile a config.org
       ;; literate config in your `doom-private-dir' whenever it changes.
       literate

       ;; The default module sets reasonable defaults for Emacs. It also
       ;; provides a Spacemacs-inspired keybinding scheme and a smartparens
       ;; config. Use it as a reference for your own modules.
       (default +bindings +smartparens))
#+END_SRC
** packages
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; ~/.doom.d/packages.el
(package! ox-reveal)
(package! tldr)
(package! smooth-scrolling)
(package! graphql-mode)
(package! evil-escape :disable t)
(package! literate-calc-mode)
#+END_SRC
* zsh
#+BEGIN_SRC sh :tangle ~/.zshrc
# TODO remove oh-my-zsh and only use autosuggestions package
export ZSH="/Users/$USER/.oh-my-zsh"

plugins=(
  git
  osx
  colored-man-pages
  colorize
  zsh-syntax-highlighting
  zsh-autosuggestions
)

export EDITOR='vim'

export PATH=$PATH:$(go env GOPATH)/bin

export GOPATH=$(go env GOPATH)
export GOROOT=$(go env GOROOT)
export GOPROXY=direct
export GOSUMDB=off

eval "$(pyenv init -)"

function chpwd() {
    emulate -L zsh
    ls -a
}

eval "$(starship init zsh)"
#+END_SRC
* git
#+BEGIN_SRC :tangle ~/.gitconfig
[url "ssh://git@github.com/"]
	insteadOf = https://github.com/
[url "ssh://git@bitbucket.org/"]
	insteadOf = https://bitbucket.org/
[user]
	name = wojtii
	email = wojciechniedbala@pm.me
[alias]
	co = checkout
	c = commit
	s = status
	a = add
[github]
	user = wojtii
#+END_SRC
* vim
#+BEGIN_SRC :tangle ~/.vimrc
set number
set linebreak
set cursorline
set scrolloff=100
set showmatch
set termguicolors
set hlsearch
set smartcase
set ignorecase
set incsearch
set shiftwidth=4
set smartindent
set smarttab
set softtabstop=4
set ruler

syntax on
filetype plugin indent on

" yank to the end of line
noremap Y y$

" disable entering ex mode
nnoremap Q q

" remember last position
autocmd BufReadPost * if @% !~# '\.git[\/\\]COMMIT_EDITMSG$' && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" different cursor on insert mode
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
#+END_SRC
* starship
#+BEGIN_SRC toml :tangle ~/.config/starship.toml
prompt_order=[
  "directory",
  "git_branch",
  "cmd_duration",
  "character",
]

[character]
symbol = "Î»"

[cmd_duration]
min_time = 10

#+END_SRC
